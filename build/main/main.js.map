{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAa;AACb,iBAAiB,mBAAO,CAAC,0BAAU;;AAEnC;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;ACVA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACN6C;AACV;AACZ;AACF;AAErB,MAAM,aAAa,GAAG,mDAAY,CAAC,SAAS,EAAE,wBAAwB,CAAC;AAEvE,MAAM,MAAM,GAAG,wDAAK;IAClB,CAAC,CAAC,uBAAuB;IACzB,CAAC,CAAC,iDAAU,CAAC;QACX,QAAQ,EAAE,aAAa;QACvB,QAAQ,EAAE,OAAO;QACjB,OAAO,EAAE,IAAI;KACd,CAAC;AAEJ,KAAK,UAAU,GAAG;IAChB,MAAM,UAAU,GAAG,IAAI,mDAAa,CAAC;QACnC,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;QACX,eAAe,EAAE,IAAI;QACrB,cAAc,EAAE;YACd,gBAAgB,EAAE,KAAK;YACvB,eAAe,EAAE,IAAI;SACtB;KACF,CAAC;IACF,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;IAChC,UAAU,CAAC,IAAI,EAAE;AACnB,CAAC;AAED,mDAAa,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC","sources":["webpack://electron-react-typescript/./node_modules/electron-is-dev/index.js","webpack://electron-react-typescript/external node-commonjs \"electron\"","webpack://electron-react-typescript/external node-commonjs \"path\"","webpack://electron-react-typescript/external node-commonjs \"url\"","webpack://electron-react-typescript/webpack/bootstrap","webpack://electron-react-typescript/webpack/runtime/compat get default export","webpack://electron-react-typescript/webpack/runtime/define property getters","webpack://electron-react-typescript/webpack/runtime/hasOwnProperty shorthand","webpack://electron-react-typescript/webpack/runtime/make namespace object","webpack://electron-react-typescript/./src/main/main.ts"],"sourcesContent":["'use strict';\nconst electron = require('electron');\n\nif (typeof electron === 'string') {\n\tthrow new TypeError('Not running in an Electron environment!');\n}\n\nconst isEnvSet = 'ELECTRON_IS_DEV' in process.env;\nconst getFromEnv = Number.parseInt(process.env.ELECTRON_IS_DEV, 10) === 1;\n\nmodule.exports = isEnvSet ? getFromEnv : !electron.app.isPackaged;\n","module.exports = require(\"electron\");","module.exports = require(\"path\");","module.exports = require(\"url\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { app, BrowserWindow } from \"electron\"\nimport isDev from \"electron-is-dev\"\nimport path from \"path\"\nimport url from \"url\"\n\nconst productionUrl = path.resolve(__dirname, \"../renderer/index.html\")\n\nconst appUrl = isDev\n  ? \"http://localhost:3000\"\n  : url.format({\n    pathname: productionUrl,\n    protocol: \"file:\",\n    slashes: true\n  })\n\nasync function run() {\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    autoHideMenuBar: true,\n    webPreferences: {\n      contextIsolation: false,\n      nodeIntegration: true\n    }\n  })\n  await mainWindow.loadURL(appUrl)\n  mainWindow.show()\n}\n\napp.whenReady().then(run)"],"names":[],"sourceRoot":""}